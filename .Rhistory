set = function(y) {
x <<- y
y <<- NULL
}
get = function() x
setinv = function(inverse) inv_matrix <<- inverse
getinv = function() inv_matrix
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x, ...) {
inv_matrix = x$getinv
if(!is.null(inv_matrix)) {
message("getting cached matrix")
return(inv_matrix)
}
data <- x$get()
inv_matrix = solve(data, ...)
x$setinv(inv_matrix)
inv_matrix
}
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
cacheSolve(mat1)
test = function(mat){
## @mat: an invertible matrix
temp = makeCacheMatrix(mat)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
}
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1)
rpois(5,2)
?system.time
swirl()
ls(plants)
ls()
class(plants)
Q
bye()
bye()
swirl()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
letters
LETTERS
sample(LETTERS)
sample(c(0,1), 100, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, prob = c(0.3, 0.7), replace = TRUE)
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(10, mean = 10)
?rpois
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(Cars)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(cars)
plot(x = cars$speed, y = cars$dist, xlab = 'Speed')
plot(x = cars$speed, y = cars$dist, xlab = 'Speed', ylab = 'Stopping Distance')
plot(x = cars$speed, y = cars$dist, ylab = 'Stopping Distance')
plot(x = cars$speed, y = cars$dist, xlab = 'Speed', ylab = 'Stopping Distance')
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch() = 2)
plot(cars, pch = 2)
mtcars
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
outcome <- read.csv("~/Documents/DS/ProgAssignment3-data/outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
best <- function(state, outcome) {
right_state <- subset(outcome$State = state)
if (state != outcome$State) {
stop("invalid state")
}
}
source("best.$")
source("best.R")
source("~/Documents/DS/ProgAssignment3-data/best.R")
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
best('AR', 'heart attack')
View(outcome)
View(outcome)
best('AR', 'heart attack')
str(outcome)
best('AR', 'heart attack')
outcome_matrix <- read.csv("~/Documents/DS/ProgAssignment3-data/outcome-of-care-measures.csv", colClasses = "character")
View(outcome)
View(outcome)
outcome_matrix <- read.csv("~/Documents/DS/ProgAssignment3-data/outcome-of-care-measures.csv", colClasses = "character")
best('AR', 'heart attack')
right_state <- outcome_matrix[outcome_matrix$State %in% state)]
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
best('AR', 'heart attack')
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
names(outcome_matrix)
?subset
best <- function(state, outcome) {
right_state <- subset(outcome_matrix, outcome_matrix$State = state)
if (state != outcome$State) {
stop("invalid state")
}
}
source("~/Documents/DS/ProgAssignment3-data/best.R")
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
right_state
str(outcome_matrix)
right_state <- subset(outcome_matrix, State == state)
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
right_state
source("~/Documents/DS/ProgAssignment3-data/best.R")
right_state
best('AR', 'heart attack')
best('AL', 'heart attack')
best(state = "AL", 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AL', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AL', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AL', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AL', 'heart attack')
?isnull
?is.null
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AL', 'heart attack')
best('AN', 'heart attack')
best('AN', 'heart attack')
best('AN', 'heart attack')
best('AN', 'heart attack')
best('AN', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AN', 'heart attack')
str(outcome_matrix)
names(outcome_matrix)
source("~/Documents/DS/ProgAssignment3-data/best.R")
source("~/Documents/DS/ProgAssignment3-data/best.R")
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AN', 'heart attack')
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
?data.frame
source("~/Documents/DS/ProgAssignment3-data/best.R")
?data.frame
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
?which.min
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
?as.numeric
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AR', 'heart attack')
best('A', 'heart attack')
best('AZ', 'heart attack')
best('', 'heart attack')
best('TX', 'heart attack')
best('', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('TX', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('TX', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('TX', 'heart attack')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('TX', 'heart attack')
best('TX', 'heart failure')
best('TX', 'pneumonia')
View(outcome_matrix)
str(outcome_matrix)
header(outcome_matrix)
head(outcome_matrix)
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('TX', 'pneumonia')
best('SC', 'heart attack')
best('NY', 'pneumonia')
best('AK', 'pneumonia')
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AK', 'pneumonia', 13)
source("~/Documents/DS/ProgAssignment3-data/best.R")
source("~/Documents/DS/ProgAssignment3-data/best.R")
best('AK', 'pneumonia', 13)
best('AK', 'pneumonia', "worst")
best('NC', 'heart attack', "worst")
best('WA', 'heart attack', 7)
best('TX', 'pneumonia', 10)
best('NY', 'heart attack', 7)
best('HI', 'heart attack', 4)
best('NJ', 'penumonia', "worst")
best('NJ', 'pneumonia', "worst")
best('NV', 'heart failure', 10)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
setwd("~/Documents/DS/GetClean/HAR/")
library(plyr)
# Step 1
# Merge the training and test sets to create one data set
###############################################################################
x_training <- read.table("train/X_train.txt")
y_training <- read.table("train/y_train.txt")
subject_training <- read.table("train/subject_train.txt")
x_testing <- read.table("test/X_test.txt")
y_testing <- read.table("test/y_test.txt")
subject_testing <- read.table("test/subject_test.txt")
# create 'x' data set
x_data <- rbind(x_training, x_testing)
# create 'y' data set
y_data <- rbind(y_training, y_testing)
# create 'subject' data set
subject_data <- rbind(subject_training, subject_testing)
# Step 2
# Extract only the measurements on the mean and standard deviation for each measurement
###############################################################################
features <- read.table("features.txt")
# get only columns with mean() or std() in their names
mean_features <- grep("-(mean|std)\\(\\)", features[, 2])
# subset the desired columns
x_data <- x_data[, mean_features]
# correct the column names
names(x_data) <- features[mean_features, 2]
# Step 3
# Use descriptive activity names to name the activities in the data set
###############################################################################
activities <- read.table("activity_labels.txt")
# update values with correct activity names
y_data[, 1] <- activities[y_data[, 1], 2]
# correct column name
names(y_data) <- "activity"
# Step 4
# Appropriately label the data set with descriptive variable names
###############################################################################
# correct column name
names(subject_data) <- "subject"
# bind all the data in a single data set
final <- cbind(x_data, y_data, subject_data)
# Step 5
# Create a second, independent tidy data set with the average of each variable
# for each activity and each subject
###############################################################################
# 66 <- 68 columns but last two (activity & subject)
average_data <- ddply(final, .(subject, activity), function(x) colMeans(x[, 1:66]))
write.table(average_data, "average_data.txt", row.name=FALSE)
rm(list = ls())
setwd("~/Documents/DS/RepRes/RepData/PeerAssignment1")
setwd("~/Documents/DS/RepRes/RepData_PeerAssignment1/")
setwd("~/Documents/DS/RepRes/RepData_PeerAssignment1")
setwd("~/Documents/DS/RepRes/RepData_PeerAssessment1")
knitr::opts_chunk$set(echo = TRUE)
unzip('activity.zip')
raw_data <- read.csv("activity.csv")
View(raw_data)
View(raw_data)
cleaned_dates <- strptime(raw_data[,2], format = "%Y-%m-%d")
raw_data[,2] <- strptime(raw_data[,2], format = "%Y-%m-%d")
View(raw_data)
raw_data[2, ] <- strptime(raw_data[2, ], format = "%Y-%m-%d")
View(raw_data)
unzip('activity.zip')
raw_data <- read.csv("activity.csv")
raw_data[2, ] <- strptime(raw_data[2, ], format = "%Y-%m-%d")
unzip('activity.zip')
raw_data <- read.csv("activity.csv")
View(raw_data)
raw_data[2, ] <- as.Date(raw_data[2, ], format = "%Y-%m-%d")
View(raw_data)
raw_data[, 2] <- as.Date(raw_data[, 2], format = "%Y-%m-%d")
View(raw_data)
summed_steps <- aggregate(raw_data, by=list(raw_data$date), sum)
knitr::opts_chunk$set(echo = TRUE)
unzip('activity.zip')
raw_data <- read.csv("activity.csv", na.rm=TRUE)
knitr::opts_chunk$set(echo = TRUE)
unzip('activity.zip')
raw_data <- read.csv("activity.csv")
raw_data[, 2] <- as.Date(raw_data[, 2], format = "%Y-%m-%d")
summed_steps <- aggregate(raw_data, by=list(raw_data$date), sum)
summed_steps <- aggregate(raw_data$steps, by=list(raw_data$date), sum)
View(summed_steps)
View(summed_steps)
summed_steps <- aggregate(raw_data$steps, by=list(raw_data$date), sum)
names(summed_steps) <- c("Date","Steps")
View(summed_steps)
ggplot(data=summed_steps, aes = (Date,Steps))+geom_point(
ggplot(data=summed_steps, aes = (Date,Steps))+geom_point()
qplot(x=summed_steps$Date,y=summed_steps$Steps,geom='point')
library(ggplot2)
qplot(x=summed_steps$Date,y=summed_steps$Steps,geom='point')
qplot(x=summed_steps$Date,y=summed_steps$Steps,geom='smooth')
qplot(x=summed_steps$Date,y=summed_steps$Steps,geom='point',xlab="Date", ylab="Steps")
qplot(x=summed_steps$Date,y=summed_steps$Steps,geom='histogram',xlab="Steps", ylab="Number of Days")
qplot(x=summed_steps$Steps,geom='histogram',xlab="Steps", ylab="Number of Days")
qplot(x=summed_steps$Steps,geom='histogram', binwidth=1000, xlab="Steps", ylab="Number of Days")
?mean
knitr::opts_chunk$set(echo = TRUE)
unzip('activity.zip')
raw_data <- read.csv("activity.csv")
raw_data[, 2] <- as.Date(raw_data[, 2], format = "%Y-%m-%d")
